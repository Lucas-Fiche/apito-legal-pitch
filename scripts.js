// Dados para a demonstra√ß√£o autom√°tica baseados no documento
const dadosDemo = {
    nome_peticao: "Luis Ferreira de Souza",
    clube: "Atl√©tico P√© de Rato", 
    competicao: "Campeonato Regional de Futebol ‚Äì S√©rie A",
    acusacao: "Praticar jogada violenta durante partida (Art. 254 do CBJD)",
    contexto: "Durante a partida contra o Uni√£o Recreativa Vai Que D√°, aos 23 minutos do segundo tempo, o atleta disputou uma bola de forma leg√≠tima com o advers√°rio, sem qualquer excesso ou deslealdade. O √°rbitro assinalou falta e aplicou cart√£o vermelho direto, registrando em s√∫mula como 'jogada violenta'. A disputa foi de bola, sem inten√ß√£o de atingir o advers√°rio, n√£o houve les√£o ou necessidade de atendimento m√©dico, e as imagens da TV Regional Esportes evidenciam que a jogada foi l√≠cita.",
    pedidos: "Arquivamento da den√∫ncia por aus√™ncia de infra√ß√£o disciplinar; subsidiariamente, desclassifica√ß√£o para infra√ß√£o de menor gravidade com aplica√ß√£o da pena m√≠nima; produ√ß√£o de prova de v√≠deo; oitiva pessoal do atleta"
};

/**
 * Fun√ß√£o para criar efeito de digita√ß√£o
 * @param {HTMLElement} elemento - Campo a ser preenchido
 * @param {string} texto - Texto a ser digitado
 * @param {number} velocidade - Velocidade de digita√ß√£o (ms)
 * @returns {Promise} - Promise que resolve quando termina de digitar
 */
function digitarTexto(elemento, texto, velocidade = 50) {
    return new Promise((resolve) => {
        elemento.value = '';
        elemento.classList.add('field-highlight');
        
        // Para textarea, remover o efeito typing que causa problema com quebra de linha
        if (elemento.tagName.toLowerCase() === 'textarea') {
            elemento.classList.remove('typing-effect');
        } else {
            elemento.classList.add('typing-effect');
        }
        
        let i = 0;
        const timer = setInterval(() => {
            elemento.value += texto.charAt(i);
            
            // Para textarea, fazer scroll para mostrar o texto sendo digitado
            if (elemento.tagName.toLowerCase() === 'textarea') {
                elemento.scrollTop = elemento.scrollHeight;
            }
            
            i++;
            
            if (i >= texto.length) {
                clearInterval(timer);
                elemento.classList.remove('typing-effect');
                setTimeout(() => {
                    elemento.classList.remove('field-highlight');
                    resolve();
                }, 500);
            }
        }, velocidade);
    });
}

/**
 * Fun√ß√£o para scroll suave at√© o elemento
 * @param {HTMLElement} elemento - Elemento para fazer scroll
 */
function scrollParaElemento(elemento) {
    elemento.scrollIntoView({ 
        behavior: 'smooth', 
        block: 'center' 
    });
}

/**
 * Fun√ß√£o para destacar se√ß√£o
 * @param {string} sectionSelector - Seletor da se√ß√£o
 */
function destacarSecao(sectionSelector) {
    // Remove destaque anterior
    document.querySelectorAll('.form-section').forEach(section => {
        section.style.transform = 'scale(1)';
        section.style.boxShadow = 'none';
    });
    
    // Adiciona destaque √† se√ß√£o atual
    const secao = document.querySelector(sectionSelector);
    if (secao) {
        secao.style.transform = 'scale(1.02)';
        secao.style.boxShadow = '0 4px 20px rgba(58, 150, 206, 0.2)';
        secao.style.transition = 'all 0.3s ease';
        scrollParaElemento(secao);
    }
}

/**
 * Fun√ß√£o para simular upload de arquivo durante demo
 */
function simularUploadDemo() {
    return new Promise((resolve) => {
        const fileAttached = document.getElementById('fileAttached');
        const uploadPlaceholder = document.getElementById('uploadPlaceholder');
        const btnUpload = document.querySelector('.btn-upload');
        
        // Primeiro ocultar arquivo existente e mostrar placeholder
        fileAttached.style.display = 'none';
        uploadPlaceholder.style.display = 'block';
        
        // Anima√ß√£o de upload
        btnUpload.textContent = 'Carregando arquivo...';
        btnUpload.disabled = true;
        
        setTimeout(() => {
            // Atualizar informa√ß√µes do arquivo
            fileAttached.querySelector('.file-name').textContent = 'Intimacao_Luis_Ferreira_STJD.pdf';
            fileAttached.querySelector('.file-size').textContent = '182 KB';
            
            // Mostrar arquivo anexado
            uploadPlaceholder.style.display = 'none';
            fileAttached.style.display = 'flex';
            btnUpload.textContent = 'Alterar Arquivo';
            btnUpload.disabled = false;
            
            // Efeito de sucesso
            fileAttached.style.transform = 'scale(1.05)';
            setTimeout(() => {
                fileAttached.style.transform = 'scale(1)';
                resolve();
            }, 300);
        }, 1500);
    });
}

/**
 * Fun√ß√£o principal da demonstra√ß√£o autom√°tica
 */
async function iniciarDemo() {
    const demoBtn = document.getElementById('demoBtn');
    const submitBtn = document.getElementById('submitBtn');
    
    // Desabilitar bot√µes
    demoBtn.disabled = true;
    submitBtn.disabled = true;
    demoBtn.textContent = 'üé¨ Demonstra√ß√£o em Andamento...';
    
    try {
        // Limpar formul√°rio
        document.getElementById('peticaoForm').reset();
        document.getElementById('fileAttached').style.display = 'none';
        document.getElementById('uploadPlaceholder').style.display = 'block';
        
        // Limpar sugest√µes de objetivos
        const sugestoes = document.getElementById('sugestoes-objetivos');
        sugestoes.style.display = 'none';
        sugestoes.innerHTML = '';
        
        // Scroll para o topo do formul√°rio
        document.querySelector('.contact-form-container').scrollIntoView({ 
            behavior: 'smooth', 
            block: 'start' 
        });
        
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // 1. Informa√ß√µes Pessoais
        destacarSecao('.form-section:nth-of-type(1)');
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        await digitarTexto(
            document.getElementById('nome_peticao'), 
            dadosDemo.nome_peticao, 
            80
        );
        await new Promise(resolve => setTimeout(resolve, 500));
        
        await digitarTexto(
            document.getElementById('clube'), 
            dadosDemo.clube, 
            80
        );
        await new Promise(resolve => setTimeout(resolve, 500));
        
        await digitarTexto(
            document.getElementById('competicao'), 
            dadosDemo.competicao, 
            60
        );
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // 2. Detalhes da Acusa√ß√£o
        destacarSecao('.form-section:nth-of-type(2)');
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        await digitarTexto(
            document.getElementById('acusacao'), 
            dadosDemo.acusacao, 
            60
        );
        await new Promise(resolve => setTimeout(resolve, 800));
        
        await digitarTexto(
            document.getElementById('contexto'), 
            dadosDemo.contexto, 
            40
        );
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // 3. Objetivos da Defesa
        destacarSecao('.form-section:nth-of-type(3)');
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        await digitarTexto(
            document.getElementById('pedidos'), 
            dadosDemo.pedidos, 
            50
        );
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // 4. Upload de Arquivo
        destacarSecao('.form-section:nth-of-type(4)');
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        await simularUploadDemo();
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // 5. Finalizar demonstra√ß√£o
        document.querySelectorAll('.form-section').forEach(section => {
            section.style.transform = 'scale(1)';
            section.style.boxShadow = 'none';
        });
        
        // Scroll para o bot√£o de gerar
        scrollParaElemento(document.querySelector('.form-actions'));
        
        // Animar bot√£o de gerar
        submitBtn.style.transform = 'scale(1.1)';
        submitBtn.style.boxShadow = '0 4px 20px rgba(38, 128, 83, 0.4)';
        setTimeout(() => {
            submitBtn.style.transform = 'scale(1)';
            submitBtn.style.boxShadow = 'none';
        }, 1000);
        
    } catch (error) {
        console.error('Erro na demonstra√ß√£o:', error);
    } finally {
        // Reabilitar bot√µes
        demoBtn.disabled = false;
        submitBtn.disabled = false;
        demoBtn.textContent = 'üé¨ Demonstra√ß√£o Autom√°tica';
    }
}

// Objetivos pr√©-definidos baseados em diferentes tipos de acusa√ß√µes
const objetivosPorTipo = {
    'violencia': [
        'Desclassifica√ß√£o da conduta para conduta menos grave',
        'Aplica√ß√£o de advert√™ncia simples',
        'Arquivamento por aus√™ncia de dolo',
        'Convers√£o da suspens√£o em multa',
        'Realiza√ß√£o de audi√™ncia de oitiva pessoal'
    ],
    'doping': [
        'Comprova√ß√£o de uso terap√™utico autorizado',
        'Demonstra√ß√£o de contamina√ß√£o cruzada',
        'Redu√ß√£o da penalidade por colabora√ß√£o',
        'Suspens√£o condicional da pena',
        'Arquivamento por v√≠cio processual'
    ],
    'financeiro': [
        'Parcelamento do d√©bito em aberto',
        'Redu√ß√£o do valor da multa aplicada',
        'Comprova√ß√£o de adimplemento posterior',
        'Suspens√£o da penalidade at√© regulariza√ß√£o',
        'Convers√£o da puni√ß√£o em advert√™ncia'
    ],
    'padrao': [
        'Arquivamento da den√∫ncia por aus√™ncia de provas',
        'Desclassifica√ß√£o da infra√ß√£o para conduta menos grave',
        'Aplica√ß√£o de advert√™ncia simples',
        'Convers√£o da pena privativa em restritiva de direitos',
        'Realiza√ß√£o de audi√™ncia de oitiva pessoal',
        'Revis√£o da penalidade aplicada',
        'Suspens√£o condicional da execu√ß√£o da pena'
    ]
};

/**
 * Fun√ß√£o para buscar objetivos da IA
 * Simula o comportamento da API do Gemini
 */
function buscarObjetivosIA() {
    const btn = document.getElementById('helpBtn');
    const div = document.getElementById('sugestoes-objetivos');
    const acusacao = document.getElementById('acusacao').value.toLowerCase();

    btn.disabled = true;
    btn.textContent = "Justinho est√° pensando...";

    // Simular processamento da IA
    setTimeout(() => {
        let objetivos = objetivosPorTipo.padrao;

        // Detectar tipo de acusa√ß√£o baseado em palavras-chave
        if (acusacao.includes('agress√£o') || acusacao.includes('viol√™ncia') || acusacao.includes('briga') || acusacao.includes('violenta')) {
            objetivos = objetivosPorTipo.violencia;
        } else if (acusacao.includes('doping') || acusacao.includes('subst√¢ncia') || acusacao.includes('dopagem')) {
            objetivos = objetivosPorTipo.doping;
        } else if (acusacao.includes('financeiro') || acusacao.includes('pagamento') || acusacao.includes('d√©bito')) {
            objetivos = objetivosPorTipo.financeiro;
        }

        let html = `<strong>Objetivos sugeridos com base no seu caso:</strong><ul style="margin-top:5px;padding-left:20px;">`;
        objetivos.forEach(objetivo => {
            html += `<li>${objetivo}</li>`;
        });
        html += `</ul>`;
        
        div.innerHTML = html;
        div.style.display = 'block';

        btn.disabled = false;
        btn.textContent = "‚ùì Quer ajuda para saber quais s√£o poss√≠veis objetivos?";
    }, 2000); // 2 segundos para simular processamento
}

/**
 * Fun√ß√£o para simular download de arquivos
 * @param {string} tipo - Tipo do arquivo ('docx' ou 'pdf')
 */
function simularDownload(tipo) {
    alert(`Download do arquivo ${tipo.toUpperCase()} iniciado!\n\n(Em uma apresenta√ß√£o real, o arquivo seria baixado automaticamente)`);
}

/**
 * Fun√ß√£o para remover arquivo anexado
 */
function removerArquivo() {
    const fileAttached = document.getElementById('fileAttached');
    const uploadPlaceholder = document.getElementById('uploadPlaceholder');
    const btnUpload = document.querySelector('.btn-upload');
    
    // Confirmar remo√ß√£o
    if (confirm('Tem certeza que deseja remover este arquivo?')) {
        fileAttached.style.display = 'none';
        uploadPlaceholder.style.display = 'block';
        btnUpload.textContent = 'Selecionar Arquivo';
        
        // Limpar input
        document.getElementById('anexo').value = '';
    }
}

/**
 * Fun√ß√£o para processar upload de arquivo
 * @param {File} file - Arquivo selecionado
 */
function processarUpload(file) {
    const fileAttached = document.getElementById('fileAttached');
    const uploadPlaceholder = document.getElementById('uploadPlaceholder');
    const btnUpload = document.querySelector('.btn-upload');
    
    // Validar tipo de arquivo
    const tiposAceitos = ['application/pdf', 'application/msword', 
                         'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
                         'image/jpeg', 'image/jpg', 'image/png'];
    
    if (!tiposAceitos.includes(file.type)) {
        alert('Tipo de arquivo n√£o suportado. Use PDF, DOC, DOCX, JPG ou PNG.');
        return;
    }
    
    // Validar tamanho (10MB max)
    if (file.size > 10 * 1024 * 1024) {
        alert('Arquivo muito grande. Tamanho m√°ximo: 10MB.');
        return;
    }
    
    // Atualizar interface
    const fileName = file.name;
    const fileSize = (file.size / 1024).toFixed(0) + ' KB';
    
    fileAttached.querySelector('.file-name').textContent = fileName;
    fileAttached.querySelector('.file-size').textContent = fileSize;
    
    uploadPlaceholder.style.display = 'none';
    fileAttached.style.display = 'flex';
    btnUpload.textContent = 'Alterar Arquivo';
}

/**
 * Fun√ß√£o para validar campos obrigat√≥rios
 * @returns {boolean} - true se todos os campos est√£o preenchidos
 */
function validarFormulario() {
    const campos = [
        'nome_peticao',
        'clube',
        'competicao',
        'acusacao',
        'contexto',
        'pedidos'
    ];

    for (let campo of campos) {
        const valor = document.getElementById(campo).value.trim();
        if (!valor) {
            alert(`Por favor, preencha o campo "${document.querySelector(`label[for="${campo}"]`).textContent.replace(' *', '')}".`);
            document.getElementById(campo).focus();
            return false;
        }
    }
    
    // Verificar se h√° arquivo anexado
    const fileAttached = document.getElementById('fileAttached');
    if (fileAttached.style.display === 'none') {
        alert('Por favor, anexe o documento da intima√ß√£o.');
        return false;
    }
    
    return true;
}

/**
 * Fun√ß√£o para processar o formul√°rio de peti√ß√£o
 * Simula o comportamento da API do Gemini
 */
function processarPeticao() {
    const submitBtn = document.getElementById('submitBtn');
    const downloadSection = document.getElementById('downloadSection');
    
    // Valida√ß√£o
    if (!validarFormulario()) {
        return;
    }

    // Simular processamento
    submitBtn.innerHTML = 'ü§ñ Justinho est√° trabalhando...';
    submitBtn.disabled = true;
    submitBtn.classList.add('loading');

    // Simular tempo de processamento da IA (3-5 segundos)
    const tempoProcessamento = Math.random() * 2000 + 3000; // Entre 3-5 segundos
    
    setTimeout(() => {
        submitBtn.innerHTML = 'Gerar Peti√ß√£o com Justinho';
        submitBtn.disabled = false;
        submitBtn.classList.remove('loading');
        
        // Mostrar se√ß√£o de download
        downloadSection.classList.add('show');
        downloadSection.scrollIntoView({ behavior: 'smooth', block: 'center' });
        
        // Opcional: Limpar formul√°rio ap√≥s sucesso
        // document.getElementById('peticaoForm').reset();
    }, tempoProcessamento);
}

/**
 * Fun√ß√£o para preencher exemplo (√∫til para demonstra√ß√µes)
 */
function preencherExemplo() {
    document.getElementById('nome_peticao').value = 'Jo√£o Silva Santos';
    document.getElementById('clube').value = 'Sport Club Internacional';
    document.getElementById('competicao').value = 'Campeonato Brasileiro S√©rie A';
    document.getElementById('acusacao').value = 'Conduta violenta contra advers√°rio durante partida';
    document.getElementById('contexto').value = 'Durante o segundo tempo da partida contra o Flamengo, houve um lance disputado na √°rea onde ocorreu contato f√≠sico. O √°rbitro interpretou como conduta violenta, mas as imagens mostram que foi um lance normal de jogo, sem inten√ß√£o de agredir.';
    document.getElementById('pedidos').value = 'Arquivamento da den√∫ncia por aus√™ncia de dolo e desclassifica√ß√£o da conduta';
}

/**
 * Fun√ß√£o para adicionar bot√£o de exemplo (opcional)
 * Descomente para usar em demonstra√ß√µes
 */
function adicionarBotaoExemplo() {
    const formActions = document.querySelector('.form-actions');
    const exemploBtn = document.createElement('button');
    exemploBtn.type = 'button';
    exemploBtn.className = 'btn btn-secondary';
    exemploBtn.textContent = 'üìù Preencher Exemplo';
    exemploBtn.onclick = preencherExemplo;
    formActions.appendChild(exemploBtn);
}

// Event Listeners
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM carregado, inicializando eventos...');
    
    // Adicionar evento de submit ao formul√°rio
    const form = document.getElementById('peticaoForm');
    if (form) {
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            processarPeticao();
        });
    }

    // Evento para upload de arquivo
    const anexoInput = document.getElementById('anexo');
    if (anexoInput) {
        anexoInput.addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                processarUpload(file);
            }
        });
    }

    // Drag and drop para √°rea de upload
    const uploadArea = document.querySelector('.file-upload-area');
    if (uploadArea) {
        uploadArea.addEventListener('dragover', function(e) {
            e.preventDefault();
            this.style.borderColor = 'var(--cor-detalhes)';
            this.style.background = 'rgba(255, 255, 255, 0.08)';
        });
        
        uploadArea.addEventListener('dragleave', function(e) {
            e.preventDefault();
            this.style.borderColor = 'var(--cor-bordas-form)';
            this.style.background = 'rgba(255, 255, 255, 0.02)';
        });
        
        uploadArea.addEventListener('drop', function(e) {
            e.preventDefault();
            this.style.borderColor = 'var(--cor-bordas-form)';
            this.style.background = 'rgba(255, 255, 255, 0.02)';
            
            const files = e.dataTransfer.files;
            if (files.length > 0) {
                processarUpload(files[0]);
            }
        });
    }

    // Verificar se bot√£o demo existe
    const demoBtn = document.getElementById('demoBtn');
    if (demoBtn) {
        console.log('Bot√£o demo encontrado!');
    } else {
        console.error('Bot√£o demo n√£o encontrado!');
    }

    // Opcional: Adicionar bot√£o de exemplo para demonstra√ß√µes
    // Descomente a linha abaixo se quiser o bot√£o de preenchimento r√°pido
    // adicionarBotaoExemplo();
});